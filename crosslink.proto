// crosslink
//
// crosslink is a set of service definitions to manage position targets from
// users, either an aggregated basis or individual user basis.
//
syntax = "proto3";

package crosslink;

// DecimalValue is a struct containing a value and a decimal. the value must be
// integer.
//
// ## Examples
// - 1.25 can be expressed as 125 with decimal -2.
message DecimalValue {
  // value.
  int64 value = 1;
  // decimal.
  int32 decimal = 2;
}

// TargetPosition is a position target requested by the user.
//
// TargetPosition is uniquely identified by `on_behalf_of`, which is the sending
// client, and the `base_instrument` id.
//
// TargetPosition contains
// - base instrument: the instrument of the position.
// - quantity: a quantity where the position target is.
//   if quantity is less than 0, it's a short, otherwise it's long.
// - target_timestamp: the time at which the position should be obtained.
message TargetPosition {
  // seq of the target position.
  // this should be monotonic increasing number (not necessarily consecutive)
  // from the client. crosslink will reject all target positions requests that
  // have older seq. seq is used to ensure that requests that failed to reach
  // crosslink will not be accidentally received after newer requests are
  // processed.
  //
  int64 seq = 2;
  // on_behalf_of: the ultimate owner of the position, used to get the necessary
  // authorizations etc.
  int64 on_behalf_of = 3;
  // quantity
  DecimalValue quantity = 4;
  // the instrument to trade for.
  int64 base_instrument = 5;
  // target timestamp.
  // nano seconds since unix epoch.
  int64 target_timestamp = 7;
  // buy limit price.
  // omit to indicate a market price.
  DecimalValue buy_limit_price = 8;
  // sell limit price.
  // omit to indicat a market price.
  DecimalValue sell_limit_price = 9;
}

// Fill is the fill sent back.
message Fill {
  // id of the fill.
  int64 id = 1;
  // timestamp of the fill. nano seconds since unix epoch.
  int64 timestamp = 2;
  // seq of the target position request that this fill is for.
  int64 target_position_seq = 3;
  // quantity filled.
  DecimalValue fill_quantity = 4;
  // value of the fill. this equals the fill price * fill quantity.
  // for example, if buy 1 BTC is filled at 100 USDC. The fill quantity will be
  // 1, and the fill value will be 100.
  // if sell 1 BTC is filled at 100 USDC. the fill quantity will be -1, and the
  // fill value will be -100.
  DecimalValue fill_value = 5;
  // the location id. where the fill is coming from.
  // **note**: this destination_id is not necessarily same as an order's
  // destination id. for example, an order may be sent to a smart order router,
  // which routes the order to SERUM, and gets the fills. destination should be
  // SERUM, where the fill is ultimately from.
  int64 fill_venue = 6;
}

// Confirmation confirms the target position request is received.
message Confirmation {}

// Reject rejects the target position.
message Reject {
  enum RejectReason {
    // Unknown reject reason.
    UNKNOWN = 0;
    // seq in the target position is too old.
    SEQ_TOO_OLD = 1;
    // Target quantity in the target position is invalid for the given market.
    INVALID_QUANTITY = 2;
  }
  RejectReason reject_reason = 1;
}

// OrderUpdate is sent back to the order sender.
message Update {
  // which client this target position is for.
  int64 on_behalf_of = 1;
  // base instrument this target position is for.
  int64 base_instrument = 2;
  // sequence number of the update. Unique and monotonically increasing for a
  // single base_instrument.
  int64 seq = 3;
  // update information.
  oneof info {
    Fill fill = 14;
    // Position updates: not currently supported
    Position position = 15;
  }
}

// Position held.
message Position {
  // instrument
  int64 base_instrument = 1;
  // last update timestamp of the position.
  // nano seconds from unix epoch.
  int64 last_update_timestamp = 2;
  // quantity
  DecimalValue quantity = 11;
  // current target position
  DecimalValue current_target_position = 12;
  // fills
  repeated Fill fills = 13;
}

// Crosslink
//
// TargetPosition is managed through the below workflow:
// - current target position and held quantities can be queried through
// GetCurrentPosition
// - target positions can be updated with SendTargetPosition
// - the updates to the target positions can be received by subscribing to
// SubscribePosition.
// - trading can be stopped by CancelTargetPosition
service Crosslink {
  // Subscribe Target Position Updates
  rpc SubscribePosition(SubscribePositionRequest)
      returns (stream SubscribePositionResponse) {}

  // Send a new set of target positions
  rpc SendTargetPosition(SendTargetPositionRequest)
      returns (SendTargetPositionResponse) {}

  // Cancel outstanding target positions and cease trading.
  // Current held positions are kept and not liquidated.
  rpc CancelTargetPosition(CancelTargetPositionRequest)
      returns (CancelTargetPositionResponse) {}

  // GetCurrentposition gets the current positions for one on_behalf_of.
  rpc GetCurrentPosition(GetCurrentPositionRequest)
      returns (GetCurrentPositionResponse) {}

  rpc LookupInstrumentId(LookupInstrumentIdRequest)
      returns (LookupInstrumentIdResponse) {}

  rpc LookupLocationId(LookupLocationIdRequest)
      returns (LookupLocationIdResponse) {}
}

/* SubscribePosition */

message SubscribePositionRequest {
  int64 on_behalf_of = 1;

  repeated int64 base_instruments = 2;

  // subscribe_to_all will return all updates to a this on_behalf_of.
  // base_instruments fields will be ignored.
  bool subscribe_to_all = 3;
}

message SubscribePositionResponse {
  Update update = 1;
  message SubscribePositionError {
    string error = 2;
  }
  SubscribePositionError error = 3;
}

/* SendTargetPosition */

message SendTargetPositionRequest {
  repeated TargetPosition target_position = 1;
}

message SendTargetPositionResponse {
  message RejectOrConfirm {
    int64 on_behalf_of = 1;
    int64 base_instrument = 2;
    oneof reject_or_confirm_info {
      Confirmation confirmation = 3;
      Reject reject = 4;
    }
  }
  repeated RejectOrConfirm responses = 1;
}

/* CancelTargetPosition */

message CancelTargetPositionRequest {
  int64 on_behalf_of = 1;

  repeated int64 base_instruments = 2;

  // cancel_all will cancel all the current open orders and stop trading.
  // base_instruments will be ignored.
  bool cancel_all = 3;
}

message CancelTargetPositionResponse {
  repeated int64 cancelled_target_positions = 1;
}

/* GetCurrentPosition */

message GetCurrentPositionRequest {
  int64 on_behalf_of = 1;
}

message GetCurrentPositionResponse {
  // all the positions
  repeated Position positions = 1;

  message GetCurrentPositionError {
    string error = 1;
  }
  GetCurrentPositionError error = 2;
}

/* LookupInstrumentId */

message LookupInstrumentIdRequest {
  string name = 1;
}

message LookupInstrumentIdResponse {
  int64 instrument_id = 1;
  message LookupInstrumentIdError {
    string error = 1;
  }
  LookupInstrumentIdError error = 2;
}

/* LookupLocationId */

message LookupLocationIdRequest {
  string name = 1;
}

message LookupLocationIdResponse {
  int64 location_id = 1;
  message LookupLocationIdError {
    string error = 1;
  }
  LookupLocationIdError error = 2;
}
