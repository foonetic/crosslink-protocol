// crosslink
//
// crosslink is a set of service definitions to manage position targets from
// users, either an aggregated basis or individual user basis.
//
syntax = "proto3";

package crosslink;

// DecimalValue is a struct containing a value and a decimal. the value must be
// integer.
//
// ## Examples
// - 1.25 can be expressed as 125 with decimal -2.
message DecimalValue {
  // value.
  int64 value = 1;
  // decimal.
  int32 decimal = 2;
}

// TargetPosition is a position target requested by the user.
//
// TargetPosition is uniquely identified by `on_behalf_of`, which is the sending
// client, and the `base_instrument` id.
//
// TargetPosition contains
// - base instrument: the instrument of the position.
// - quantity: a quantity where the position target is.
//   if quantity is less than 0, it's a short, otherwise it's long.
// - target_timestamp: the time at which the position should be obtained.
message TargetPosition {
  // seq: seq of the target position.
  int64 seq = 2;
  // on_behalf_of: the ultimate owner of the position, used to get the necessary
  // authorizations etc.
  int64 on_behalf_of = 3;
  // quantity
  DecimalValue quantity = 4;
  // the instrument to trade for.
  int64 base_instrument = 5;
  // is cancel
  bool is_cancel = 6;
  // target timestamp.
  // nano seconds since unix epoch.see comments on Timestamp.
  uint64 target_timestamp = 7;
  // buy limit price.
  // omit to indicate a market price.
  DecimalValue buy_limit_price = 8;
  // sell limit price.
  // omit to indicat a market price.
  DecimalValue sell_limit_price = 9;
}

// Fill is the fill sent back.
message Fill {
  // id of the fill.
  int64 id = 1;
  // quantity filled.
  DecimalValue fill_quantity = 4;
  // price at which the fill happens
  DecimalValue fill_price = 5;
  // the location id. where the fill is coming from.
  // **note**: this destination_id is not necessarily same as the order's
  // destination id. for example, the order may be sent to the router, the
  // router then routes the order to SERUM, and gets the fills. The destination
  // should be SERUM, where the fill is ultimately from.
  int64 fill_venue = 6;
}

// Confirmation is a confirmation sent back from the destination.
message Confirmation {}

// Reject
message Reject {}

// Cancel.
message Cancel {}

// OrderUpdate is sent back to the order sender.
message Update {
  // which client this target position is for.
  int64 on_behalf_of = 1;
  // base instrument this target position is for.
  int64 base_instrument = 2;
  // sequence number of the update.
  int64 seq = 3;
  // update information.
  oneof info {
    Fill fill = 14;
  }
}

// Position held.
message Position {
  // instrument
  int64 base_instrument = 1;
  // quantity
  DecimalValue quantity = 2;
  // current target position
  DecimalValue current_target_position = 3;
  // fills
  repeated Fill fills = 4;
}

// CrosslinkService
//
// TargetPosition is managed through the below workflow:
// - current target position and held quantities can be queried through
// GetCurrentPosition
// - target positions can be updated with SendTargetPosition
// - the updates to the target positions can be received by subscribing to
// SubscribeTargetPosition.
// - trading can be stopped by CancelTargetPosition
service Crosslink {
  // Subscribe Target Position Updates
  rpc SubscribeTargetPosition(SubscribeTargetPositionRequest)
      returns (stream SubscribeTargetPositionResponse) {}

  // Send a new set of target positions
  rpc SendTargetPosition(SendTargetPositionRequest)
      returns (SendTargetPositionResponse) {}

  // Cancel outstanding target positions and cease trading.
  // Current held positions are kept and not liquidated.
  rpc CancelTargetPosition(CancelTargetPositionRequest)
      returns (CancelTargetPositionResponse) {}

  // GetCurrentposition gets the current positions for one on_behalf_of.
  rpc GetCurrentPosition(GetCurrentPositionRequest)
      returns (GetCurrentPositionResponse) {}

  rpc LookupInstrumentId(LookupInstrumentIdRequest)
      returns (LookupInstrumentIdResponse) {}

  rpc LookupLocationId(LookupLocationIdRequest)
      returns (LookupLocationIdResponse) {}
}

message SubscribeTargetPositionRequest {
  int64 on_behalf_of = 1;
  repeated int64 base_instruments = 2;
  // subscribe_to_all will return all updates to a this on_behalf_of
  // base_instruments fields will be ignored.
  bool subscribe_to_all = 3;
}

// Update Response
message SubscribeTargetPositionResponse {
  repeated Update update = 1;
}

message SendTargetPositionRequest {
  repeated TargetPosition target_position = 1;
}

message SendTargetPositionResponse {
  message RejectOrConfirm {
    oneof reject_or_confirm_info {
      Confirmation confirmation = 1;
      Reject reject = 2;
    }
  }
  repeated RejectOrConfirm responses = 1;
}

message CancelTargetPositionRequest {
  int64 on_behalf_of = 1;
  repeated int64 base_instruments = 2;
  // cancel_all will cancel all the current open orders and stop trading.
  // base_instruments will be ignored.
  bool cancel_all = 3;
}

message CancelTargetPositionResponse {
  repeated int64 cancelled_target_positions = 1;
}

message GetCurrentPositionRequest {
  int64 on_behalf_of = 1;
}

message GetCurrentPositionResponse {
  repeated Position positions = 1;
  message GetCurrentPositionError {
    string error = 1;
  }
  GetCurrentPositionError error = 2;
}

message LookupInstrumentIdRequest {
  string name = 1;
}

message LookupInstrumentIdResponse {
  int64 instrument_id = 1;
  message LookupInstrumentIdError {
    string error = 1;
  }
  LookupInstrumentIdError error = 2;
}

message LookupLocationIdRequest {
  string name = 1;
}

message LookupLocationIdResponse {
  int64 location_id = 1;
  message LookupLocationIdError {
    string error = 1;
  }
  LookupLocationIdError error = 2;
}
